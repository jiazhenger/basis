{
	"title" : "es6 教案",
	"data" : {
		"vars" : {
			"title" : "作用域",
			"tags" : {
				"let" : {
					"def" : "用来声明变量",
					"ins" : [
						"它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效",
						"只在块级内起作用",
						"不存在变量提升",
						"不允许在相同作用域内，重复声明同一个变量"
					],
					"cas" : "let.html",
					"att" : {}
				},
				"const" : {
					"def" : "声明一个只读的常量",
					"ins" : [
						"一旦声明，常量的值就不能改变",
						"const的作用域与let命令相同：只在声明所在的块级作用域内有效",
						"const命令声明的常量也是不提升",
						"const声明的常量，也与let一样不可重复声明"
					],
					"cas" : "const.html",
					"att" : {}
				}
			}
		},
		"destructuring" : {
			"title" : "变量的解构赋值",
			"tags" : {
				"数组" : {
					"def" : "ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构",
					"ins" : [
						"如果解构不成功，变量的值就等于undefined",
						"另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功",
						"解构赋值不仅适用于var命令，也适用于let和const命令"
					],
					"cas" : "destructuring-array.html",
					"att" : {}
				},
				"对象" : {
					"def" : "解构不仅可以用于数组，还可以用于对象",
					"ins" : [
						"对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值"
					],
					"cas" : "destructuring-object.html",
					"att" : {}
				},
				"默认值" : {
					"def" : "解构赋值允许指定默认值",
					"ins" : [
						"ES6内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于undefined，默认值是不会生效的",
						"如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值",
						"解构赋值不仅适用于var命令，也适用于let和const命令"
					],
					"pro" : ["参数变量是默认声明的，就不能用let或const再次声明"],
					"cas" : "destructuring-default.html",
					"att" : {}
				},
				"字符串" : {
					"def" : "字符串被转换成了一个类似数组的对象",
					"ins" : ["类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值"],
					"cas" : "destructuring-string.html",
					"att" : {}
				},
				"数值和布尔值" : {
					"def" : "解构赋值时，如果等号右边是数值和布尔值，则会先转为对象",
					"ins" : ["由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错"],
					"cas" : "destructuring-boolean.html",
					"att" : {}
				},
				"函数参数" : {
					"def" : "函数参数的解构赋值",
					"ins" : [],
					"cas" : "destructuring-function.html",
					"att" : {}
				},
				"圆括号" : {
					"def" : "ES6的规则是，只要有可能导致解构的歧义，就不得使用圆括号",
					"ins" : [
						"以下三种解构赋值不得使用圆括号：",
						"（1）变量声明语句中，不能带有圆括号",
						"（2）函数参数中，模式不能带有圆括号",
						"（3）赋值语句中，不能将整个模式，或嵌套模式中的一层，放在圆括号之中",
						"可以使用圆括号的情况：",
						"（1）只有一种：赋值语句的非模式部分，可以使用圆括号"
					],
					"att" : {}
				},
				"用途" : {
					"def" : "变量的解构赋值用途很多",
					"ins" : [
						"交换变量的值",
						"从函数返回多个值",
						"函数参数的定义",
						"提取JSON数据",
						"函数参数的默认值",
						"遍历Map结构",
						"输入模块的指定方法"
					],
					"att" : {}
				}
			}
		},
		"string" : {
			"title" : "字符串的扩展",
			"tags" : {
				"字符的Unicode表示法" : {
					"def" : "只要将码点放入大括号，就能正确解读该字符",
					"ins" : [
						"JavaScript允许采用\\uxxxx形式表示一个字符，其中“xxxx”表示字符的码点",
						"但是，这种表示法只限于\\u0000——\\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表达"
					],
					"cas" : "unicode.html",
					"att" : {}
				},
				"codePointAt()" : {
					"def" : "将字符串转换为unicode字符",
					"ins" : [
						"正确返回32位的UTF-16字符的码点",
						"返回的是码点的十进制值，如果想要十六进制的值，可以使用toString方法转换一下"
					],
					"cas" : "codePointAt.html",
					"att" : {
						"str.codePointAt(len)" : {
							"len" : ["字节长度"]
						}
					}
				},
				"normalize()" : {
					"def" : "用来将字符的不同表示方法统一为同样的形式，这称为Unicode正规化",
					"ins" : [],
					"cas" : "normalize.html",
					"att" : {
						"str.normalize(param)" : {
							"NFC" : [
								"默认参数",
								"表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价"
							],
							"NFD" : [
								"表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。"
							],
							"NFKC" : [
								"表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，normalize方法不能识别中文。）"
							],
							"NFKD" : [
								"表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。"
							]
						}
					}
				},
				"String.fromCodePoint()" : {
					"def" : "用于从码点返回对应字符串",
					"pro" : [
						"fromCodePoint方法定义在String对象上，而codePointAt方法定义在字符串的实例对象上",
						"可以识别0xFFFF的字符"
					],
					"cas" : "fromCodePoint.html",
					"att" : {}
				},
				"字符串的遍历器接口" : {
					"def" : "字符串可以被for...of循环遍历",
					"ins" : [],
					"cas" : "forOfString.html",
					"att" : {}
				},
				"indexOf()新方法" : {
					"def" : "用来确定一个字符串是否包含在另一个字符串中",
					"ins" : [],
					"cas" : "indexOf.html",
					"att" : {
						"str.includes(str,n)" : {
							"title" : ["返回布尔值，表示是否找到了参数字符串"],
							"start" : ["第 n 个，表示开始搜索的位置"]
						},
						"str.startsWith(str,n)" : {
							"title" : ["返回布尔值，表示参数字符串是否在源字符串的头部"],
							"start" : ["第 n 个，表示开始搜索的位置"]
						},
						"str.endsWith(str,n)" : {
							"title" : ["返回布尔值，表示参数字符串是否在源字符串的尾部"],
							"start" : ["针对前n个字符"]
						}
					}
				},
				"repeat()" : {
					"def" : "返回一个新字符串，表示将原字符串重复n次",
					"ins" : [
						"参数如果是小数，会被取整",
						"如果repeat的参数是负数或者Infinity，会报错",
						"如果参数是0到-1之间的小数，则等同于0",
						"参数NaN等同于0",
						"如果repeat的参数是字符串，则会先转换成数字"
					],
					"cas" : "repeat.html",
					"att" : {
						"str.repeat(n)" : {
							"str" : ["字符串"],
							"n" : ["重复n次"]
						}
					}
				},
				"模板字符串 ${}" : {
					"def" : "模板字符串（template string）是增强版的字符串，用反引号（``）标识",
					"pro" : ["大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性"],
					"ins" : [
						"反引号（``）标识，它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量",
						"由于模板字符串的大括号内部，就是执行JavaScript代码，因此如果大括号内部是一个字符串，将会原样输出",
						"模板字符串甚至还能嵌套"
					],
					"cas" : "templateString.html",
					"att" : {}
				},
				"模板编译" : {
					"def" : "模板编译",
					"ins" : [],
					"cas" : "templateCompile.html",
					"att" : {}
				},
				"标签模板" : {
					"def" : "它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）",
					"ins" : [
						"“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数"
					],
					"cas" : "templateLabel.html",
					"att" : {
						"tag`a,b,c`" : {
							"a" : [
								"第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分",
								"也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推"
							],
							"b,c,..." : ["其他参数，都是模板字符串各个变量被替换后的值"]
						}
					}
				},
				"String.raw()" : {
					"def" : "用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串",
					"ins" : [],
					"cas" : "stringRaw.html",
					"att" : {}
				},
				"补全字符串长度" : {
					"def" : "如果某个字符串不够指定长度，会在头部或尾部补全",
					"pro" : ["ES7标准，暂不支持"],
					"isN" : 1,
					"ins" : [
						"如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串",
						"如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串",
						"如果省略第二个参数，则会用空格补全长度"
					],
					"cas" : "padStartEnd.html",
					"att" : {
						"str.padStart(len,string)" : {
							"title" : [
								"头部补全",
								"padStart的常见用途是为数值补全指定位数",
								"另一个用途是提示字符串格式（YYYY-MM-DD）"
							],
							"len" : ["指定字符串的最小长度"],
							"string" : ["用来补全的字符串"]
						},
						"str.padEnd(len,string)" : {
							"title" : ["尾部补全"],
							"len" : ["指定字符串的最小长度"],
							"string" : ["用来补全的字符串"]
						}
					}
				},
				"at()" : {
					"def" : "返回字符串给定位置的字符",
					"pro" : ["暂不支持"],
					"ins" : ["可以识别Unicode编号大于0xFFFF的字符，返回正确的字符"],
					"isN" : 1,
					"cas" : "at.html",
					"att" : {}
				}
			}
		},
		"RegExp" : {
			"title" : "正则的扩展",
			"tags" : {
				"new RegExp()" : {
					"def" : "new RegExp(/reg/gi,'gi')",
					"ins" : [
						"如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符",
						"而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符"
					],
					"pro" : ["可能不支持"],
					"cas" : "regExp.html",
					"att" : {}
				},
				"正则方法" : {
					"def" : "字符串对象共有4个方法，可以使用正则表达式：match()、replace()、search()和split()",
					"ins" : [],
					"cas" : "regMethod.html",
					"att" : {
						"RegExp.prototype[Symbol.match]" : {
							"title" : ["相当于：String.prototype.match"]
						},
						"RegExp.prototype[Symbol.replace]" : {
							"title" : ["相当于：String.prototype.replace"]
						},
						"RegExp.prototype[Symbol.search]" : {
							"title" : ["相当于：String.prototype.search"]
						},
						"RegExp.prototype[Symbol.split]" : {
							"title" : ["相当于：String.prototype.split"]
						}
					}
				}
			}
		},
		"Number" : {
			"title" : "数值的扩展",
			"tags" : {
				"二进制和八进制表示法" : {
					"def" : "二进制和八进制表示法",
					"ins" : [
						"二进制表示法：前缀 0b|0B",
						"八进制表示法：前缀 0o|0O",
						"如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法"
					],
					"pro" : ["从ES5开始，在严格模式之中，八进制就不再允许使用前缀0表示，ES6进一步明确，要使用前缀0o表示"],
					"cas" : "binary.html",
					"att" : {}
				},
				"数值扩展的方法" : {
					"def" : "ES6 扩展的方法",
					"ins" : [],
					"cas" : "number.html",
					"att" : {
						"Number.isFinite()" : {
							"title" : ["用来检查一个数值是否非无穷（infinity）"]
						},
						"Number.isNaN()" : {
							"title" : ["用来检查一个值是否为NaN"]
						},
						"Number.parseInt()" : {
							"title" : ["将字符串转换为整数"]
						},
						"Number.parseFloat()" : {
							"title" : ["将字符串转换为浮点数"]
						},
						"Number.isInteger()" : {
							"title" : [
								"判断一个值是否为整数",
								"需要注意的是，在JavaScript内部，整数和浮点数是同样的储存方法，所以3和3.0被视为同一个值"
							]
						},
						"Number.EPSILON" : {
							"title" : [
								"为浮点数计算，设置一个误差范围",
								"如果这个误差能够小于Number.EPSILON，我们就可以认为得到了正确结果"
							]
						},
						"Number.MAX_SAFE_INTEGER|Number.MIN_SAFE_INTEGER" : {
							"title" : [
								"ES6引入了Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限"
							]
						},
						"Number.isSafeInteger()" : {
							"title" : ["用来判断一个整数是否落在这个范围之内"]
						}
					}
				},
				"Math对象的扩展" : {
					"def" : "ES6在Math对象上新增了17个与数学相关的方法。所有这些方法都是静态方法，只能在Math对象上调用",
					"ins" : [],
					"cas" : "math.html",
					"att" : {
						"Math.trunc()" : {
							"title" : ["用于去除一个数的小数部分，返回整数部分"]
						},
						"Math.sign()" : {
							"title" : ["用来判断一个数到底是正数、负数、还是零"],
							"+1" : ["参数为正数"],
							"-1" : ["参数为负数"],
							"0" : ["参数为0"],
							"-0" : ["参数为-0"],
							"NaN" : ["其他值"]
						},
						"Math.cbrt()" : {
							"title" : ["用于计算一个数的立方根"]
						},
						"Math.hypot()" : {
							"title" : ["返回所有参数的平方和的平方根"]
						},
						"Math.clz32()" : {
							"title" : ["返回一个数的32位无符号整数形式有多少个前导0"]
						},
						"Math.imul()" : {
							"title" : ["返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数"]
						},
						"Math.fround()" : {
							"title" : ["返回一个数的单精度浮点数形式"]
						}
					}
				},
				"对数的方法" : {
					"def" : "ES6新增了4个对数相关方法",
					"ins" : [],
					"cas" : "logarithmic.html",
					"att" : {
						"Math.expm1()" : {
							"title" : ["返回ex - 1,即Math.exp(x) - 1"]
						},
						"Math.log1p()" : {
							"title" : ["返回1 + x的自然对数，即Math.log(1 + x)。如果x小于-1，返回NaN"]
						},
						"Math.log10()" : {
							"title" : ["返回以10为底的x的对数。如果x小于0，则返回NaN"]
						},
						"Math.log2()" : {
							"title" : ["返回以2为底的x的对数。如果x小于0，则返回NaN"]
						}
					}
				},
				"三角函数的方法" : {
					"def" : "ES6新增了6个三角函数方法",
					"ins" : [],
					"att" : {
						"Math.sinh(x)" : {
							"title" : ["返回x的双曲正弦"]
						},
						"Math.cosh(x)" : {
							"title" : ["返回x的双曲余弦"]
						},
						"Math.tanh(x)" : {
							"title" : ["返回x的双曲正切"]
						},
						"Math.asinh()" : {
							"title" : ["返回x的反双曲正弦"]
						},
						"Math.acosh()" : {
							"title" : ["返回x的反双曲余弦"]
						},
						"Math.atanh()" : {
							"title" : ["返回x的反双曲正切"]
						}
					}
				},
				"指数运算符" : {
					"def" : "ES7新增了一个指数运算符（**），目前Babel转码器已经支持",
					"ins" : ["指数运算符可以与等号结合，形成一个新的赋值运算符（**=）"],
					"cas" : "indexOperator.html",
					"att" : {}
				}
			}
		},
		"Array" : {
			"title" : "数组的扩展",
			"tags" : {
				"Array.from()" : {
					"def" : "用于将两类对象转为真正的数组",
					"ins" : [],
					"cas" : "arrayForm.html",
					"att" : {}
				},
				"Array.of()" : {
					"def" : "用于将一组值，转换为数组",
					"ins" : [],
					"cas" : "arrayOf.html",
					"att" : {}
				},
				"Array.copyWithin()" : {
					"def" : "在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组",
					"ins" : ["使用这个方法，会修改当前数组"],
					"cas" : "arrayCopyWithin.html",
					"att" : {
						"copyWithin()" : {
							"title" : ["它接受三个参数","这三个参数都应该是数值，如果不是，会自动转为数值"],
							"target" : ["必需，从该位置开始替换数据"],
							"start" : ["可选，从该位置开始读取数据，默认为0。如果为负值，表示倒数"],
							"end" : ["可选，到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数"]
						}
					}
				},
				"Array.find()|Array.findIndex()" : {
					"def" : "用于找出第一个符合条件的数组成员",
					"ins" : [],
					"cas" : "arrayFind.html",
					"att" : {
						"Array.find(value,index,arr)" : {
							"title" : ["它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员，如果没有符合条件的成员，则返回undefined"],
							"value" : ["当前的值"],
							"index" : ["当前的位置"],
							"arr" : ["原数组"]
						},
						"Array.findIndex(value,index,arr)" : {
							"title" : ["数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1"],
							"value" : ["当前的值"],
							"index" : ["当前的位置"],
							"arr" : ["原数组"]
						}
					}
				},
				"Array.fill()" : {
					"def" : "使用给定值，填充一个数组",
					"ins" : ["fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置"],
					"cas" : "arrayFill.html",
					"att" : {
						"Array.fill(value,start,end)" : {
							"value" : ["填充值"],
							"start" : ["起始位置"],
							"end" : ["结束位置"]
						}
					}
				},
				"遍历数组" : {
					"def" : "提供三个新的方法——entries()，keys()和values()——用于遍历数组",
					"ins" : ["它们都返回一个遍历器对象，可以用for...of循环进行遍历"],
					"cas" : "arrayKeys.html",
					"att" : {
						"arr.keys()" : {
							"title" : ["对键名的遍历"]
						},
						"arr.values()" : {
							"title" : ["对键值的遍历"]
						},
						"arr.entries()" : {
							"title" : ["对键值对的遍历"]
						}
					}
				},
				"includes()" : {
					"def" : "表示某个数组是否包含给定的值，返回一个布尔值",
					"ins" : ["ES7 方法"],
					"cas" : "arrayIncludes.html",
					"att" : {}
				},
				"数组的空位" : {
					"def" : "数组的空位指，数组的某一个位置没有任何值",
					"ins" : [
						"比如，Array构造函数返回的数组都是空位",
						"ES5大多数情况下会忽略空位",
						"ES6则是明确将空位转为undefined，不会忽略空位"
					],
					"pro" : [
						"空位不是undefined，一个位置的值等于undefined，依然是有值的。空位是没有任何值，in运算符可以说明这一点",
						"由于空位的处理规则非常不统一，所以建议避免出现空位"
					],
					"cas" : "arrayIncludes.html",
					"att" : {}
				}
			}
		},
		"Function" : {
			"title" : "函数的扩展",
			"tags" : {
				"函数的length属性" : {
					"def" : "指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数",
					"ins" : [],
					"cas" : "functionLength.html",
					"att" : {}
				},
				"应用" : {
					"def" : "利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误",
					"ins" : ["可以将参数默认值设为undefined，表明这个参数是可以省略的"],
					"cas" : "",
					"att" : {}
				},
				"rest参数" : {
					"def" : "ES6引入rest参数（形式为“...变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了",
					"ins" : ["est参数搭配的变量是一个数组，该变量将多余的参数放入数组中"],
					"pro" : ["rest参数之后不能再有其他参数（即只能是最后一个参数），否则会报错","函数的length属性，不包括rest参数"],
					"cas" : "functionRest.html",
					"att" : {}
				},
				"扩展运算符" : {
					"def" : "扩展运算符（spread）是三个点（...）。它好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列",
					"ins" : ["替代数组的apply方法"],
					"cas" : "functionOperator.html",
					"att" : {}
				},
				"name 属性" : {
					"def" : "函数的name属性，返回该函数的函数名",
					"ins" : [],
					"cas" : "functionName.html",
					"att" : {}
				},
				"箭头函数" : {
					"def" : "ES6允许使用“箭头”（=>）定义函数",
					"ins" : [],
					"pro" : [
						"函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。this对象的指向是可变的，但是在箭头函数中，它是固定的",
						"不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误",
						"不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替",
						"不可以使用yield命令，因此箭头函数不能用作Generator函数"
					],
					"att" : {
						"let f = v => v" : {
							"f" : ["函数名"],
							"v" : ["一个参数"],
							"=>v" : ["return v"]
						},
						"let f = () => 1" : {
							"f" : ["函数名"],
							"()" : ["参数为空"],
							"=>1" : ["return 1"]
						},
						"let f = (x,y) => x+y" : {
							"f" : ["函数名"],
							"(x,y)" : ["多个参数"],
							"=>x+y" : ["return x+y"]
						},
						"let f = () => {let x=0; return x}" : {
							"f" : ["函数名"],
							"()" : ["参数为空"],
							"{}" : ["由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号"]
						}
					}
				},
				"函数的绑定" : {
					"def" : "箭头函数可以绑定this对象，大大减少了显式绑定this对象的写法（call、apply、bind）",
					"ins" : [
						"函数绑定运算符是并排的两个双冒号（::），双冒号左边是一个对象，右边是一个函数",
						"该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面",
						"如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面",
						"由于双冒号运算符返回的还是原对象，因此可以采用链式写法"
					],
					"pro" : ["箭头函数并不适用于所有场合，所以ES7提出了“函数绑定”（function bind）运算符，用来取代call、apply、bind调用。虽然该语法还是ES7的一个提案，但是Babel转码器已经支持"],
					"cas" : "functionBind.html",
					"att" : {}
				},
				"尾调用优化" : {
					"def" : "尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数",
					"ins" : ["尾调用不一定出现在函数尾部，只要是最后一步操作即可"],
					"pro" : [
						"只能是 return fn() 格式，固定格式，不能变",
						"ES6的尾调用优化只在严格模式下开启，正常模式是无效的"
					],
					"att" : {}
				},
				"尾递归" : {
					"def" : "函数调用自身，称为递归。如果尾调用自身，就称为尾递归",
					"ins" : ["递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。"],
					"cas" : "functionRecursive.html",
					"att" : {}
				}
			}
		},
		"Object" : {
			"title" : "对象的扩展",
			"tags" : {
				"属性的简洁表示法" : {
					"def" : "ES6允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁",
					"ins" : [],
					"cas" : "objectShorthand.html",
					"att" : {}
				},
				"属性名表达式" : {
					"def" : "ES6允许字面量定义对象时，允许把表达式放在方括号内",
					"ins" : [],
					"cas" : "object1.html",
					"att" : {}
				},
				"方法的name属性" : {
					"def" : "函数的name属性，返回函数名。对象方法也是函数，因此也有name属性",
					"ins" : ["有两种特殊情况：bind方法创造的函数，name属性返回“bound”加上原函数的名字；Function构造函数创造的函数，name属性返回“anonymous”"],
					"cas" : "objectName.html",
					"att" : {}
				},
				"Object.is()" : {
					"def" : "用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致",
					"ins" : [],
					"cas" : "objectIs.html",
					"att" : {}
				},
				"Object.assign()" : {
					"def" : "用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）",
					"ins" : [
						"为对象添加属性",
						"为对象添加方法",
						"克隆对象",
						"合并多个对象",
						"为属性指定默认值",
						"属性的可枚举性"
					],
					"pro" : [
						"如果只有一个参数，Object.assign会直接返回该参数",
						"如果该参数不是对象，则会先转成对象，然后返回",
						"实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用",
						"如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性"
					],
					"cas" : "objectAssign.html",
					"att" : {}
				},
				"属性的遍历" : {
					"def" : "ES6一共有6种方法可以遍历对象的属性",
					"ins" : [
						"首先遍历所有属性名为数值的属性，按照数字排序",
						"其次遍历所有属性名为字符串的属性，按照生成时间排序",
						"最后遍历所有属性名为Symbol值的属性，按照生成时间排序"
					],
					"cas" : "",
					"att" : {
						"for i in obj" : {
							"title" : ["循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）"]
						},
						"Object.keys(obj)" : {
							"title" : ["返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）"]
						},
						"Object.getOwnPropertyNames(obj)" : {
							"title" : ["返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）"]
						},
						"Object.getOwnPropertySymbols(obj)" : {
							"title" : ["返回一个数组，包含对象自身的所有Symbol属性"]
						},
						"Reflect.ownKeys(obj)" : {
							"title" : ["返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举"]
						},
						"Reflect.enumerate(obj)" : {
							"title" : ["返回一个Iterator对象，遍历对象自身的和继承的所有可枚举属性（不含Symbol属性），与for...in循环相同"]
						}
					}
				},
				"__proto__属性" : {
					"def" : "__proto__属性（前后各两个下划线），用来读取或设置当前对象的prototype对象",
					"ins" : [],
					"pro" : ["该属性没有写入ES6的正文，而是写入了附录，原因是__proto__前后的双下划线，说明它本质上是一个内部属性，而不是一个正式的对外的API，只是由于浏览器广泛支持，才被加入了ES6。标准明确规定，只有浏览器必须部署这个属性，其他运行环境不一定需要部署，而且新的代码最好认为这个属性是不存在的。因此，无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替"],
					"cas" : "let.html",
					"att" : {
						"Object.setPrototypeOf(object, prototype)" : {
							"title" : [
								"用来设置一个对象的prototype对象",
								"它是ES6正式推荐的设置原型对象的方法"
							]
						},
						"Object.getPrototypeOf(obj)" : {
							"title" : ["该方法与setPrototypeOf方法配套，用于读取一个对象的prototype对象"]
						},
						"Object.getOwnPropertyDescriptor(obj,property)" : {
							"title" : ["返回某个对象属性的描述对象","ES5"]
						},
						"Object.getOwnPropertyDescriptors(obj,property)" : {
							"title" : ["返回指定对象所有自身属性（非继承属性）的描述对象","ES7"]
						}
					}
				}
			}
		},
		"Symbol" : {
			"title" : "Symbol",
			"tags" : {
				"Symbol 概述" : {
					"def" : "避免对象的属性名冲突",
					"ins" : [
						"ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。它是JavaScript语言的第七种数据类型",
						"Symbol值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的Symbol类型。凡是属性名属于Symbol类型，就都是独一无二的，可以保证不会与其他属性名产生冲突"
					],
					"pro" : [
						"Symbol函数前不能使用new命令，否则会报错。这是因为生成的Symbol是一个原始类型的值，不是对象。也就是说，由于Symbol值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型",
						"Symbol函数的参数只是表示对当前Symbol值的描述，因此相同参数的Symbol函数的返回值是不相等的",
						"Symbol值不能与其他类型的值进行运算，会报错",
						"Symbol值可以显式转为字符串",
						"Symbol值也可以转为布尔值，但是不能转为数值"
					],
					"cas" : "symbol.html",
					"att" : {}
				},
				"作为属性名的Symbol" : {
					"def" : "由于每一个Symbol值都是不相等的，这意味着Symbol值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖",
					"ins" : [],
					"pro" : [
						"Symbol值作为对象属性名时，不能用点运算符",
						"在对象的内部，使用Symbol值定义属性时，Symbol值必须放在方括号之中",
						"Symbol值作为属性名时，该属性还是公开属性，不是私有属性"
					],
					"cas" : "symbolName.html",
					"att" : {}
				},
				"属性名的遍历" : {
					"def" : "Object.getOwnPropertySymbols方法，可以获取指定对象的所有Symbol属性名",
					"ins" : ["Symbol作为属性名，该属性不会出现在for...in、for...of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()返回"],
					"cas" : "symbolFor.html",
					"att" : {
						"Object.getOwnPropertySymbols(obj)" : {
							"title" : ["返回一个数组，成员是当前对象的所有用作属性名的Symbol值"]
						}
					}
				},
				"同一个Symbol值" : {
					"def" : "Symbol.for()",
					"ins" : [
						"Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会",
						"Symbol.for()不会每次调用就返回一个新的Symbol类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值",
						"比如，如果你调用Symbol.for('cat')30次，每次都会返回同一个Symbol值，但是调用Symbol('cat')30次，会返回30个不同的Symbol值"
					],
					"pro" : ["Symbol.for为Symbol值登记的名字，是全局环境的，可以在不同的iframe或service worker中取到同一个值"],
					"cas" : "symbolSame.html",
					"att" : {
						"Symbol.for()" : {
							"title" : ["设置使用同一个Symbol值"]
						},
						"Symbol.keyFor()" : {
							"title" : ["返回一个已登记的Symbol类型值的key"]
						}
					}
				},
				"内置的Symbol值" : {
					"def" : "除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法",
					"ins" : [],
					"cas" : "",
					"att" : {
						"Symbol.hasInstance" : {
							"title" : ["对象的Symbol.hasInstance属性，指向一个内部方法。当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法。比如，foo instanceof Foo在语言内部，实际调用的是Foo[Symbol.hasInstance](foo)"]
						},
						"Symbol.isConcatSpreadable" : {
							"title" : ["等于一个布尔值，表示该对象使用Array.prototype.concat()时，是否可以展开"]
						},
						"Symbol.species" : {
							"title" : ["对象的Symbol.species属性，指向一个方法。该对象作为构造函数创造实例时，会调用这个方法。即如果this.constructor[Symbol.species]存在，就会使用这个属性作为构造函数，来创造新的实例对象"]
						},
						"Symbol.match" : {
							"title" : ["对象的Symbol.match属性，指向一个函数。当执行str.match(myObject)时，如果该属性存在，会调用它，返回该方法的返回值"]
						},
						"Symbol.replace" : {
							"title" : ["对象的Symbol.replace属性，指向一个方法，当该对象被String.prototype.replace方法调用时，会返回该方法的返回值"]
						},
						"Symbol.search" : {
							"title" : ["对象的Symbol.search属性，指向一个方法，当该对象被String.prototype.search方法调用时，会返回该方法的返回值"]
						},
						"Symbol.split" : {
							"title" : ["对象的Symbol.split属性，指向一个方法，当该对象被String.prototype.split方法调用时，会返回该方法的返回值"]
						},
						"Symbol.iterator" : {
							"title" : ["对象的Symbol.iterator属性，指向该对象的默认遍历器方法"]
						},
						"Symbol.toPrimitive" : {
							"title" : ["象的Symbol.toPrimitive属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值"],
							"Number" : ["该场合需要转成数值"],
							"String" : ["该场合需要转成字符串"],
							"Default" : ["该场合可以转成数值，也可以转成字符串"]
						},
						"Symbol.toStringTag" : {
							"title" : ["这个属性可以用来定制[object Object]或[object Array]中object后面的那个字符串"]
						},"Symbol.unscopables" : {
							"title" : ["对象的Symbol.unscopables属性，指向一个对象。该对象指定了使用with关键字时，哪些属性会被with环境排除"]
						}
					}
				}
			}
		},
		"Proxy" : {
			"title" : "Proxy",
			"tags" : {
				"Proxy 概念" : {
					"def" : "Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程",
					"ins" : ["要使得Proxy起作用，必须针对Proxy实例进行操作，而不是针对目标对象（上例是空对象）进行操作"],
					"cas" : "proxy.html",
					"att" : {
						"var proxy = new Proxy(target, handler)" : {
							"title" : ["ES6原生提供Proxy构造函数，用来生成Proxy实例"],
							"target" : ["第一个参数是所要代理的目标对象"],
							"handler" : ["一个配置对象，对于每一个被代理的操作，需要提供一个对应的处理函数，该函数将拦截对应的操作"]
						}
					}
				}
			}
		},
		"Module" : {
			"title" : "Module",
			"tags" : {
				"严格模式限制条件" : {
					"def" : "严格模式限制条件",
					"ins" : [
						"变量必须声明后再使用",
						"函数的参数不能有同名属性，否则报错",
						"不能使用with语句",
						"不能对只读属性赋值，否则报错",
						"不能使用前缀0表示八进制数，否则报错",
						"不能删除不可删除的属性，否则报错",
						"不能删除变量delete prop，会报错，只能删除属性delete global[prop]",
						"eval不会在它的外层作用域引入变量",
						"eval和arguments不能被重新赋值",
						"arguments不会自动反映函数参数的变化",
						"能使用arguments.callee",
						"不能使用arguments.caller",
						"禁止this指向全局对象",
						"不能使用fn.caller和fn.arguments获取函数调用的堆栈",
						"增加了保留字（比如protected、static和interface）"
					],
					"pro" : ["ES6的模块自动采用严格模式，不管你有没有在模块头部加上'use strict';"],
					"cas" : "",
					"att" : {}
				},
				"export 命令" : {
					"def" : "用于规定模块的对外接口",
					"ins" : ["一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量"],
					"cas" : "moduleExport.html",
					"att" : {}
				},
				"import 命令" : {
					"def" : "使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）",
					"ins" : [
						"如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名",
						"大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同",
						"如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名",
						"除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面"
					],
					"cas" : "moduleImport.html",
					"att" : {}
				}
			}
		},
		"" : {
			"title" : "",
			"tags" : {
				"" : {
					"def" : "",
					"ins" : [],
					"cas" : "let.html",
					"att" : {}
				}
			}
		}
	}
}
